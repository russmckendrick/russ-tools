// Utility functions for generating Terraform code for AWS and Azure network resources
// To be implemented: generateAwsTerraform, generateAzureTerraform

export function generateAwsTerraform({ vpcName, vpcCidr, region, subnets }) {
  // Helper to sanitize Terraform resource names
  const safeName = (name) => name.replace(/[^a-zA-Z0-9_]/g, '_').toLowerCase();
  const vpcResourceName = safeName(vpcName || 'main_vpc');

  // Provider block
  let tf = `provider \"aws\" {\n  region = \"${region || 'us-east-1'}\"\n}\n\n`;

  // VPC block
  tf += `resource \"aws_vpc\" \"${vpcResourceName}\" {\n  cidr_block = \"${vpcCidr}\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = {\n    Name = \"${vpcName}\"\n  }\n}\n\n`;

  // Subnets
  subnets.forEach((subnet, idx) => {
    const subnetName = safeName(subnet.name || `subnet_${idx+1}`);
    tf += `resource \"aws_subnet\" \"${subnetName}\" {\n` +
      `  vpc_id            = aws_vpc.${vpcResourceName}.id\n` +
      `  cidr_block        = \"${subnet.cidr}\"\n` +
      (subnet.az ? `  availability_zone = \"${subnet.az}\"\n` : '') +
      `  map_public_ip_on_launch = ${subnet.public ? 'true' : 'false'}\n` +
      `  tags = {\n    Name = \"${subnet.name || `Subnet ${idx+1}`}\"\n  }\n` +
      `}\n\n`;
  });

  return tf.trim();
}


export function generateAzureTerraform({ vnetName, vnetCidr, location, subnets }) {
  // CAF-compliant: hyphens for Azure resource names, underscores for Terraform variables
  // CAF-compliant naming: [prefix]-[project]-[env]-[region]-[instance]
  function getRegionShort(loc) {
    // Example: uksouth -> uks, eastus2 -> eus2
    if (!loc) return 'xx';
    const match = loc.match(/^([a-z]+)[a-z]*([0-9]*)$/);
    if (!match) return loc.slice(0,3);
    const prefix = match[1].slice(0,3);
    const suffix = match[2] || '';
    return `${prefix}${suffix}`;
  }
  function cafResourceName(prefix, project, env, region, instance = '') {
    let name = [prefix, project, env, region, instance].filter(Boolean).join('-');
    name = name.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-').replace(/^-+|-+$/g, '');
    return name.slice(0, 80);
  }
  function tfVarName(name) {
    return String(name).toLowerCase().replace(/[^a-z0-9]/g, '_').replace(/_+/g, '_').replace(/^_+|_+$/g, '');
  }
  const rgVar = tfVarName('resource_group_name');
  const locVar = tfVarName('location');
  const env = 'prod';
  const regionShort = getRegionShort(location);
  const project = tfVarName(vnetName || 'main');

  // CAF names
  const rgName = cafResourceName('rg', project, env, regionShort);
  const vnetResName = cafResourceName('vnet', project, env, regionShort);
  const vnetTfName = tfVarName(vnetResName);
  const vnetResource = `resource "azurerm_virtual_network" "${vnetTfName}" {
  name                = "${vnetResName}"
  address_space       = ["${vnetCidr}"]
  location            = var.${locVar}
  resource_group_name = azurerm_resource_group.main.name
}`;
  const subnetResources = (subnets || []).map((subnet, idx) => {
    // Use subnet name as purpose, idx+1 as instance
    const purpose = tfVarName(subnet.name || `subnet${idx+1}`);
    const subnetResName = cafResourceName('snet', project, env, regionShort, (purpose !== project ? purpose : '') + (subnets.length > 1 ? `-${idx+1}` : ''));
    const subnetTfName = tfVarName(subnetResName);
    let cidr = '';
    if (subnet.base && subnet.cidr) {
      cidr = `${subnet.base}/${subnet.cidr}`;
    } else if (subnet.ip && subnet.cidr) {
      cidr = `${subnet.ip}/${subnet.cidr}`;
    } else if (subnet.cidrBlock) {
      cidr = subnet.cidrBlock;
    } else if (subnet.address_prefix) {
      cidr = subnet.address_prefix;
    }
    return `resource "azurerm_subnet" "${subnetTfName}" {
  name                 = "${subnetResName}"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.${vnetTfName}.name
  address_prefixes     = ["${cidr}"]
}`;
  }).join("\n\n");
  const rgResource = `resource "azurerm_resource_group" "main" {
  name     = "${rgName}"
  location = var.${locVar}
}`;
  const variables = `variable "${locVar}" {
  description = "Azure region"
  type        = string
  default     = "${location || 'uksouth'}"
}`;
  return [
    '# Azure Terraform HCL export generated by russ.tools',
    '',
    variables,
    '',
    rgResource,
    '',
    vnetResource,
    '',
    subnetResources
  ].join('\n');
}
