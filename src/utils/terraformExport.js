// Utility functions for generating Terraform code for AWS and Azure network resources
// To be implemented: generateAwsTerraform, generateAzureTerraform

export function generateAwsTerraform({ vpcName, vpcCidr, region, subnets }) {
  // TODO: Implement AWS Terraform HCL generation
  return `# AWS Terraform code will appear here`;
}

export function generateAzureTerraform({ vnetName, vnetCidr, location, subnets }) {
  // CAF-compliant: hyphens for Azure resource names, underscores for Terraform variables
  function cafResourceName(type, name) {
    // e.g. vnet, subnet, rg
    return `${type}-${String(name).toLowerCase().replace(/[^a-z0-9]/g, '-')}`.replace(/-+/g, '-').replace(/^-+|-+$/g, '').slice(0, 80);
  }
  function tfVarName(name) {
    return String(name).toLowerCase().replace(/[^a-z0-9]/g, '_').replace(/_+/g, '_').replace(/^_+|_+$/g, '');
  }
  const rgVar = tfVarName('resource_group_name');
  const locVar = tfVarName('location');
  const vnetResName = cafResourceName('vnet', vnetName || 'main');
  const vnetTfName = tfVarName(vnetName || 'main_vnet');
  const vnetResource = `resource "azurerm_virtual_network" "${vnetTfName}" {
  name                = "${vnetResName}"
  address_space       = ["${vnetCidr}"]
  location            = var.${locVar}
  resource_group_name = var.${rgVar}
}`;
  const subnetResources = (subnets || []).map((subnet, idx) => {
    const subnetResName = cafResourceName('subnet', subnet.name || `subnet${idx+1}`);
    const subnetTfName = tfVarName(subnet.name || `subnet${idx+1}`);
    let cidr = '';
    if (subnet.base && subnet.cidr) {
      cidr = `${subnet.base}/${subnet.cidr}`;
    } else if (subnet.ip && subnet.cidr) {
      cidr = `${subnet.ip}/${subnet.cidr}`;
    } else if (subnet.cidrBlock) {
      cidr = subnet.cidrBlock;
    } else if (subnet.address_prefix) {
      cidr = subnet.address_prefix;
    }
    return `resource "azurerm_subnet" "${subnetTfName}" {
  name                 = "${subnetResName}"
  resource_group_name  = var.${rgVar}
  virtual_network_name = azurerm_virtual_network.${vnetTfName}.name
  address_prefixes     = ["${cidr}"]
}`;
  }).join("\n\n");
  const rgResource = `resource "azurerm_resource_group" "main" {
  name     = var.${rgVar}
  location = var.${locVar}
}`;
  const variables = `variable "${rgVar}" {
  description = "Resource group name"
  type        = string
  default     = "example-rg"
}

variable "${locVar}" {
  description = "Azure region"
  type        = string
  default     = "${location || 'uksouth'}"
}`;
  return [
    '# Azure Terraform HCL export generated by russ.tools',
    '',
    variables,
    '',
    rgResource,
    '',
    vnetResource,
    '',
    subnetResources
  ].join('\n');
}
